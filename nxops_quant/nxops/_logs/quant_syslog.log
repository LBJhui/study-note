2024-08-06 13:58:44.314 | ERROR    | 4196:18368 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 13:58:47.334 | ERROR    | 4196:18368 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 13:58:50.337 | ERROR    | 4196:18368 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 13:58:53.339 | ERROR    | 4196:18368 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 13:58:56.352 | ERROR    | 4196:18368 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 14:09:15.370 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:18.386 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:21.399 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:24.404 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:27.406 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:30.415 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:33.421 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:36.426 | ERROR    | 30692:16868 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:42.759 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:45.771 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:48.773 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:51.785 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:54.788 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:09:57.796 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:00.800 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:03.811 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:06.820 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:09.824 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:12.836 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:15.840 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:10:18.843 | ERROR    | 18456:25816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/data/test'
2024-08-06 14:12:22.859 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:25.871 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:28.871 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:31.878 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:34.891 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:37.895 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:40.904 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:43.910 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:12:46.924 | ERROR    | 23524:18816 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: './data/test'
2024-08-06 14:13:27.134 | ERROR    | 16064:11192 | nxpy.service.service_player:error:82 - quant_clearer [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\Desktop\\note-docsify\\nxops_quant\\nxops\\simrun\\quant\\data\test'
2024-08-06 14:13:30.148 | ERROR    | 16064:11192 | nxpy.service.service_player:error:82 - quant_clearer [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\Desktop\\note-docsify\\nxops_quant\\nxops\\simrun\\quant\\data\test'
2024-08-06 14:13:33.154 | ERROR    | 16064:11192 | nxpy.service.service_player:error:82 - quant_clearer [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\Desktop\\note-docsify\\nxops_quant\\nxops\\simrun\\quant\\data\test'
2024-08-06 15:47:52.896 | ERROR    | 30424:24256 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:47:55.900 | ERROR    | 30424:24256 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:47:58.914 | ERROR    | 30424:24256 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:16.876 | ERROR    | 21304:30288 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:19.887 | ERROR    | 21304:30288 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:22.897 | ERROR    | 21304:30288 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:25.903 | ERROR    | 21304:30288 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:28.911 | ERROR    | 21304:30288 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:37.166 | ERROR    | 15416:24472 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:40.174 | ERROR    | 15416:24472 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:48:43.176 | ERROR    | 15416:24472 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:49:21.464 | ERROR    | 9672:23380 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:49:24.467 | ERROR    | 9672:23380 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-06 15:49:27.480 | ERROR    | 9672:23380 | nxpy.service.service_player:error:82 - quant_clearer [WinError 3] 系统找不到指定的路径。: '/media/yimt/e/temp/futurequant/out'
2024-08-07 14:48:37.585 | DEBUG    | 22612:23636 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 14:48:37.659 | DEBUG    | 22612:23636 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 14:48:37.659 | ERROR    | 22612:23636 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 14:48:37.660 | INFO     | 22612:23636 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 14:48:37.661 | ERROR    | 22612:23636 | nxpy.service.service_player:error:82 - quant_clearer 'QuantServicePlayer_Future' object has no attribute 'dump_quant_data'
2024-08-07 15:03:56.819 | DEBUG    | 22048:17464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:03:56.843 | DEBUG    | 22048:17464 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:03:56.843 | ERROR    | 22048:17464 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:03:56.844 | INFO     | 22048:17464 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:03:56.844 | ERROR    | 22048:17464 | nxpy.service.service_player:error:82 - quant_clearer 'QuantServicePlayer_Future' object has no attribute 'dump_quant_data'
2024-08-07 15:06:17.724 | DEBUG    | 9052:22724 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:06:17.755 | DEBUG    | 9052:22724 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:06:17.756 | ERROR    | 9052:22724 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:06:17.757 | INFO     | 9052:22724 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:06:17.757 | ERROR    | 9052:22724 | nxpy.service.service_player:error:82 - quant_clearer 'QuantServicePlayer_Future' object has no attribute 'dump_quant_data'
2024-08-07 15:16:06.026 | DEBUG    | 14976:28464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:16:06.056 | DEBUG    | 14976:28464 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:16:06.056 | ERROR    | 14976:28464 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-07 15:16:06.057 | INFO     | 14976:28464 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:16:06.057 | ERROR    | 14976:28464 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-07 15:31:45.763 | DEBUG    | 14540:16816 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:31:45.787 | DEBUG    | 14540:16816 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1049 (42000): Unknown database 'siminfo']
2024-08-07 15:31:45.787 | ERROR    | 14540:16816 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1049 (42000): Unknown database 'siminfo']
2024-08-07 15:31:45.789 | INFO     | 14540:16816 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:31:45.789 | ERROR    | 14540:16816 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-07 15:32:28.026 | DEBUG    | 30352:21136 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:32:28.051 | ERROR    | 30352:21136 | nxpy.db.datasource:execute:110 - 1049 (42000): Unknown database 'quant'
2024-08-07 15:32:28.051 | DEBUG    | 30352:21136 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1049 (42000): Unknown database 'quant']
2024-08-07 15:32:28.051 | ERROR    | 30352:21136 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1049 (42000): Unknown database 'quant']
2024-08-07 15:32:28.052 | INFO     | 30352:21136 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:32:28.053 | ERROR    | 30352:21136 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-07 15:33:39.600 | DEBUG    | 22356:18728 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:33:39.634 | ERROR    | 22356:18728 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-07 15:33:39.635 | DEBUG    | 22356:18728 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:33:39.635 | ERROR    | 22356:18728 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:33:39.636 | INFO     | 22356:18728 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:42:54.341 | DEBUG    | 22056:23080 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:42:54.369 | ERROR    | 22056:23080 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-07 15:42:54.369 | DEBUG    | 22056:23080 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:42:54.370 | ERROR    | 22056:23080 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:42:54.371 | INFO     | 22056:23080 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:45:01.951 | DEBUG    | 29120:26580 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:45:01.977 | ERROR    | 29120:26580 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-07 15:45:01.977 | DEBUG    | 29120:26580 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:45:01.977 | ERROR    | 29120:26580 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:45:01.979 | INFO     | 29120:26580 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:45:39.170 | DEBUG    | 28928:21992 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:45:39.195 | ERROR    | 28928:21992 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-07 15:45:39.196 | DEBUG    | 28928:21992 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:45:39.196 | ERROR    | 28928:21992 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:45:39.197 | INFO     | 28928:21992 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:50:14.735 | DEBUG    | 10444:21840 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-07 15:50:14.761 | ERROR    | 10444:21840 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-07 15:50:14.761 | DEBUG    | 10444:21840 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:50:14.761 | ERROR    | 10444:21840 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-07 15:50:14.762 | INFO     | 10444:21840 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-07 15:50:14.763 | ERROR    | 10444:21840 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 10:39:26.592 | DEBUG    | 22928:15156 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:39:26.650 | DEBUG    | 22928:15156 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-08 10:39:26.650 | ERROR    | 22928:15156 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)]
2024-08-08 10:39:26.652 | INFO     | 22928:15156 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-08 10:39:26.652 | ERROR    | 22928:15156 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 10:39:26.720 | ERROR    | 22928:15156 | nxpy.service.service_player:error:82 - quant_clearer dump[None] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 10:40:19.523 | DEBUG    | 8128:15276 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:40:19.552 | ERROR    | 8128:15276 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-08 10:40:19.552 | DEBUG    | 8128:15276 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-08 10:40:19.552 | ERROR    | 8128:15276 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-08 10:40:19.553 | INFO     | 8128:15276 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-08 10:40:40.333 | DEBUG    | 20316:9616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:40:40.491 | DEBUG    | 20316:9616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:40:40.539 | INFO     | 20316:9616 | nxpy.service.service_player:info:75 - quant_clearer deal [8755]->[./media/yimt/e/temp/futurequant/out\user_id\quant_id]
2024-08-08 10:46:58.748 | DEBUG    | 17020:5788 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:46:59.340 | DEBUG    | 17020:5788 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:46:59.386 | INFO     | 17020:5788 | nxpy.service.service_player:info:75 - quant_clearer deal [8756]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 10:48:48.117 | DEBUG    | 7408:16780 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:48:48.506 | DEBUG    | 7408:16780 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:48:48.547 | INFO     | 7408:16780 | nxpy.service.service_player:info:75 - quant_clearer deal [8757]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 10:50:40.811 | DEBUG    | 20048:5616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:50:41.189 | DEBUG    | 20048:5616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:50:41.234 | INFO     | 20048:5616 | nxpy.service.service_player:info:75 - quant_clearer deal [8758]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 10:50:41.292 | ERROR    | 20048:5616 | nxpy.service.service_player:error:82 - quant_clearer dump[8758] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 10:51:05.383 | DEBUG    | 20048:5616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:51:05.401 | DEBUG    | 20048:5616 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:51:05.452 | INFO     | 20048:5616 | nxpy.service.service_player:info:75 - quant_clearer deal [8759]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 10:51:05.507 | ERROR    | 20048:5616 | nxpy.service.service_player:error:82 - quant_clearer dump[8759] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 10:59:18.239 | DEBUG    | 22716:9408 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 10:59:18.617 | DEBUG    | 22716:9408 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 10:59:18.671 | INFO     | 22716:9408 | nxpy.service.service_player:info:75 - quant_clearer deal [8760]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 10:59:18.729 | ERROR    | 22716:9408 | nxpy.service.service_player:error:82 - quant_clearer dump[8760] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 11:00:40.682 | DEBUG    | 22332:16588 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 11:00:40.748 | DEBUG    | 22332:16588 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 11:00:40.798 | INFO     | 22332:16588 | nxpy.service.service_player:info:75 - quant_clearer deal [8761]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 11:00:40.856 | ERROR    | 22332:16588 | nxpy.service.service_player:error:82 - quant_clearer dump[8761] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:29:17.431 | DEBUG    | 1504:24544 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:29:17.887 | DEBUG    | 1504:24544 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:29:17.940 | INFO     | 1504:24544 | nxpy.service.service_player:info:75 - quant_clearer deal [8762]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:29:17.998 | ERROR    | 1504:24544 | nxpy.service.service_player:error:82 - quant_clearer dump[8762] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:30:18.230 | DEBUG    | 1400:27972 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:30:18.322 | DEBUG    | 1400:27972 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:30:18.379 | INFO     | 1400:27972 | nxpy.service.service_player:info:75 - quant_clearer deal [8763]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:30:18.442 | ERROR    | 1400:27972 | nxpy.service.service_player:error:82 - quant_clearer dump[8763] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:31:29.224 | DEBUG    | 1992:9876 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:31:29.302 | DEBUG    | 1992:9876 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:31:29.346 | INFO     | 1992:9876 | nxpy.service.service_player:info:75 - quant_clearer deal [8764]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:31:29.405 | ERROR    | 1992:9876 | nxpy.service.service_player:error:82 - quant_clearer dump[8764] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:31:47.455 | DEBUG    | 1992:9876 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:31:47.474 | DEBUG    | 1992:9876 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:31:47.528 | INFO     | 1992:9876 | nxpy.service.service_player:info:75 - quant_clearer deal [8765]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:31:47.583 | ERROR    | 1992:9876 | nxpy.service.service_player:error:82 - quant_clearer dump[8765] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:32:02.406 | DEBUG    | 14544:27168 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:32:02.786 | DEBUG    | 14544:27168 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:32:02.830 | INFO     | 14544:27168 | nxpy.service.service_player:info:75 - quant_clearer deal [8766]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:32:02.889 | ERROR    | 14544:27168 | nxpy.service.service_player:error:82 - quant_clearer dump[8766] failed: error: ['NoneType' object has no attribute 'execute']
2024-08-08 13:42:16.463 | DEBUG    | 13704:13096 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:42:17.065 | DEBUG    | 13704:13096 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:42:17.124 | INFO     | 13704:13096 | nxpy.service.service_player:info:75 - quant_clearer deal [8768]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:42:17.183 | ERROR    | 13704:13096 | nxpy.service.service_player:error:82 - quant_clearer dump[8768] failed: error: [name 'EasyDBExecutor' is not defined]
2024-08-08 13:43:50.027 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:43:50.098 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:43:50.165 | INFO     | 21180:29304 | nxpy.service.service_player:info:75 - quant_clearer deal [8769]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:43:50.224 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 13:43:50.313 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 13:43:50.424 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 13:43:50.585 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 13:43:50.650 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 13:43:50.731 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 13:43:50.868 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 13:43:51.003 | DEBUG    | 21180:29304 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 13:43:51.157 | ERROR    | 21180:29304 | nxpy.service.service_player:error:82 - quant_clearer dump[8769] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 13:45:30.977 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:45:31.065 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:45:31.110 | INFO     | 12912:27128 | nxpy.service.service_player:info:75 - quant_clearer deal [8770]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:45:31.169 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 13:45:31.210 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 13:45:31.232 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 13:45:31.303 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 13:45:31.336 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 13:45:31.358 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 13:45:31.382 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 13:45:31.416 | DEBUG    | 12912:27128 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 13:45:31.485 | ERROR    | 12912:27128 | nxpy.service.service_player:error:82 - quant_clearer dump[8770] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 13:47:02.157 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:47:02.548 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:47:02.598 | INFO     | 25252:10144 | nxpy.service.service_player:info:75 - quant_clearer deal [8771]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:47:02.642 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 13:47:02.687 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 13:47:02.719 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 13:47:02.746 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 13:47:02.775 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 13:47:02.798 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 13:47:02.822 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 13:47:02.849 | DEBUG    | 25252:10144 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 13:47:02.917 | ERROR    | 25252:10144 | nxpy.service.service_player:error:82 - quant_clearer dump[8771] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 13:49:22.700 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:49:22.785 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:49:22.838 | INFO     | 19688:27868 | nxpy.service.service_player:info:75 - quant_clearer deal [8772]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:49:22.896 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 13:49:22.939 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 13:49:22.983 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 13:49:23.012 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 13:49:23.063 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 13:49:23.093 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 13:49:23.119 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 13:49:23.167 | DEBUG    | 19688:27868 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 13:49:23.230 | ERROR    | 19688:27868 | nxpy.service.service_player:error:82 - quant_clearer dump[8772] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 13:50:25.088 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 13:50:25.162 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 13:50:25.209 | INFO     | 13352:6392 | nxpy.service.service_player:info:75 - quant_clearer deal [8773]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 13:50:25.268 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 13:50:25.316 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 13:50:25.350 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 13:50:25.383 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 13:50:25.414 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 13:50:25.446 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 13:50:25.475 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 13:50:25.512 | DEBUG    | 13352:6392 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 13:50:25.579 | ERROR    | 13352:6392 | nxpy.service.service_player:error:82 - quant_clearer dump[8773] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 14:01:15.229 | DEBUG    | 20640:25520 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:01:15.273 | ERROR    | 20640:25520 | nxpy.db.datasource:execute:110 - 1146 (42S02): Table 'quant.t_counter' doesn't exist
2024-08-08 14:01:15.273 | DEBUG    | 20640:25520 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-08 14:01:15.273 | ERROR    | 20640:25520 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=1146 (42S02): Table 'quant.t_counter' doesn't exist]
2024-08-08 14:01:15.275 | INFO     | 20640:25520 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:01:15.275 | ERROR    | 20640:25520 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 14:01:35.166 | DEBUG    | 13280:27280 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:01:56.210 | DEBUG    | 13280:27280 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:01:56.211 | ERROR    | 13280:27280 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:01:56.212 | INFO     | 13280:27280 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:01:56.213 | ERROR    | 13280:27280 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 14:03:15.643 | DEBUG    | 11200:28504 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:03:36.702 | DEBUG    | 11200:28504 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:03:36.703 | ERROR    | 11200:28504 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:03:36.704 | INFO     | 11200:28504 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:03:36.705 | ERROR    | 11200:28504 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 14:04:27.748 | DEBUG    | 21600:5860 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:04:48.780 | DEBUG    | 21600:5860 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:04:48.781 | ERROR    | 21600:5860 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:04:48.782 | INFO     | 21600:5860 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:04:48.782 | ERROR    | 21600:5860 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 14:07:18.096 | DEBUG    | 9040:16372 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:07:39.143 | DEBUG    | 9040:16372 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:07:39.144 | ERROR    | 9040:16372 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-08 14:07:39.146 | INFO     | 9040:16372 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:07:39.147 | ERROR    | 9040:16372 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-08 14:14:06.164 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:14:06.278 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:14:06.354 | INFO     | 29624:24120 | nxpy.service.service_player:info:75 - quant_clearer deal [8774]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:14:06.413 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:14:06.531 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:14:06.582 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:14:06.622 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:14:06.667 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:14:06.703 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:14:06.758 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:14:06.800 | DEBUG    | 29624:24120 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:14:06.972 | ERROR    | 29624:24120 | nxpy.service.service_player:error:82 - quant_clearer dump[8774] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 14:14:36.576 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:14:36.678 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:14:36.797 | INFO     | 13776:14028 | nxpy.service.service_player:info:75 - quant_clearer deal [8775]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:14:36.857 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:14:36.940 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:14:36.989 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:14:37.033 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:14:37.085 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:14:37.131 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:14:37.180 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:14:37.228 | DEBUG    | 13776:14028 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:14:37.326 | ERROR    | 13776:14028 | nxpy.service.service_player:error:82 - quant_clearer dump[8775] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 14:16:05.581 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:16:05.907 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:16:05.974 | INFO     | 19112:12016 | nxpy.service.service_player:info:75 - quant_clearer deal [8776]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:16:06.033 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:16:06.172 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:16:06.198 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:16:06.250 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:16:06.277 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:16:06.308 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:16:06.350 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:16:06.385 | DEBUG    | 19112:12016 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:16:06.466 | ERROR    | 19112:12016 | nxpy.service.service_player:error:82 - quant_clearer dump[8776] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 14:16:29.329 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:16:29.413 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:16:29.464 | INFO     | 17948:17192 | nxpy.service.service_player:info:75 - quant_clearer deal [8777]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:16:29.522 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:16:29.570 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:16:29.604 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:16:29.640 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:16:29.677 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:16:29.706 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:16:29.734 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:16:29.780 | DEBUG    | 17948:17192 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:21:12.593 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:21:12.673 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:21:12.729 | INFO     | 24668:16532 | nxpy.service.service_player:info:75 - quant_clearer deal [8778]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:21:12.788 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:21:12.837 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:21:12.863 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:21:12.886 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:21:12.911 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:21:12.934 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:21:12.960 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:21:12.983 | DEBUG    | 24668:16532 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:21:13.046 | ERROR    | 24668:16532 | nxpy.service.service_player:error:82 - quant_clearer dump[8778] failed: error: [(mysql.connector.errors.DatabaseError) 2005 (HY000): Unknown MySQL server host '2021@10.189.66.115' (11003)
(Background on this error at: https://sqlalche.me/e/20/4xp6)]
2024-08-08 14:27:40.539 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:27:40.932 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:27:41.320 | INFO     | 16320:1916 | nxpy.service.service_player:info:75 - quant_clearer deal [8779]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:27:41.405 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:27:41.634 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:27:41.818 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:27:41.854 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:27:41.884 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:27:41.924 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:27:41.957 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:27:41.993 | DEBUG    | 16320:1916 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:29:36.107 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:29:36.184 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:29:36.246 | INFO     | 18532:21468 | nxpy.service.service_player:info:75 - quant_clearer deal [8780]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:29:36.305 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:29:36.351 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:29:36.380 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:29:36.411 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:29:36.438 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:29:36.470 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:29:36.498 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:29:36.528 | DEBUG    | 18532:21468 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:29:37.062 | INFO     | 18532:21468 | nxpy.service.service_player:info:75 - quant_clearer deal[8780] begin
2024-08-08 14:58:12.151 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:58:12.741 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:58:12.804 | INFO     | 2648:25676 | nxpy.service.service_player:info:75 - quant_clearer deal [8781]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:58:12.862 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:58:12.910 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:58:12.938 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:58:12.962 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:58:12.987 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:58:13.012 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:58:13.041 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:58:13.075 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:58:13.953 | INFO     | 2648:25676 | nxpy.service.service_player:info:75 - quant_clearer deal[8781] begin
2024-08-08 14:58:13.953 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-08 14:58:14.005 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 14:58:14.047 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-08 14:58:14.093 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 14:58:14.169 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-08 14:58:14.288 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-08 14:58:14.333 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-08 14:58:14.373 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-08 14:58:15.071 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-08 14:58:15.116 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-08 14:58:15.175 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-08 14:58:15.595 | DEBUG    | 2648:25676 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-08 14:58:15.630 | INFO     | 2648:25676 | nxpy.service.service_player:info:75 - quant_clearer deal[8781] finished
2024-08-08 14:59:10.767 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 14:59:11.158 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 14:59:11.219 | INFO     | 14372:24776 | nxpy.service.service_player:info:75 - quant_clearer deal [8782]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 14:59:11.278 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 14:59:11.331 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 14:59:11.363 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 14:59:11.395 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 14:59:11.424 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 14:59:11.458 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 14:59:11.486 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 14:59:11.516 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 14:59:12.071 | INFO     | 14372:24776 | nxpy.service.service_player:info:75 - quant_clearer deal[8782] begin
2024-08-08 14:59:12.072 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-08 14:59:12.118 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 14:59:12.168 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-08 14:59:12.199 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 14:59:12.308 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-08 14:59:12.351 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-08 14:59:12.431 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-08 14:59:12.476 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-08 14:59:13.190 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-08 14:59:13.247 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-08 14:59:13.298 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-08 14:59:13.432 | DEBUG    | 14372:24776 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-08 14:59:13.459 | INFO     | 14372:24776 | nxpy.service.service_player:info:75 - quant_clearer deal[8782] finished
2024-08-08 16:13:31.168 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-08 16:13:31.412 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-08 16:13:31.554 | INFO     | 31620:1988 | nxpy.service.service_player:info:75 - quant_clearer deal [8783]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-08 16:13:31.611 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-08 16:13:31.666 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-08 16:13:31.700 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-08 16:13:31.740 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-08 16:13:31.799 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-08 16:13:31.835 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-08 16:13:31.882 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-08 16:13:31.931 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-08 16:13:33.143 | INFO     | 31620:1988 | nxpy.service.service_player:info:75 - quant_clearer deal[8783] begin
2024-08-08 16:13:33.143 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-08 16:13:33.199 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 16:13:33.340 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-08 16:13:33.465 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-08 16:13:33.585 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-08 16:13:33.729 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-08 16:13:33.854 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-08 16:13:33.944 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-08 16:13:34.925 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-08 16:13:34.989 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-08 16:13:35.084 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-08 16:13:35.601 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-08 16:13:35.658 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-08 16:13:35.704 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-08 16:13:35.780 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-08 16:13:35.803 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-08 16:13:35.822 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-08 16:13:35.848 | INFO     | 31620:1988 | nxpy.service.service_player:info:75 - quant_clearer deal[8783] finished
2024-08-08 16:13:35.848 | INFO     | 31620:1988 | nxpy.service.service_player:info:75 - quant_clearer fit[8783] begin
2024-08-08 16:13:35.963 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-08 16:13:35.992 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-08 16:13:36.027 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-08 16:13:36.043 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-08 16:13:36.065 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-08 16:13:36.082 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-08 16:13:36.123 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-08 16:13:36.972 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-08 16:13:37.853 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-08 16:13:37.872 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-08 16:13:37.887 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-08 16:13:37.903 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-08 16:13:37.929 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-08 16:13:37.951 | DEBUG    | 31620:1988 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-08 16:13:59.007 | ERROR    | 31620:1988 | nxpy.service.service_player:error:82 - quant_clearer fit[8783] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 13:36:50.389 | DEBUG    | 12456:19204 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 13:37:11.449 | DEBUG    | 12456:19204 | nxpy.db.executor:_execute:835 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-12 13:37:11.449 | ERROR    | 12456:19204 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-12 13:37:11.451 | INFO     | 12456:19204 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 13:37:11.451 | ERROR    | 12456:19204 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-12 14:58:38.193 | DEBUG    | 5812:32984 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 14:58:59.265 | DEBUG    | 5812:32984 | nxpy.db.executor:_execute:834 - sql [quant_data_clear.get_history_no.0] execute error: [2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-12 14:58:59.265 | ERROR    | 5812:32984 | nxpy.service.service_player:error:82 - quant_clearer failed: [code=-1, msg=2003 (HY000): Can't connect to MySQL server on '10.189.66.115:3306' (10060)]
2024-08-12 14:58:59.273 | INFO     | 5812:32984 | nxpy.service.service_player:info:75 - quant_clearer deal [None]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 14:58:59.273 | ERROR    | 5812:32984 | nxpy.service.service_player:error:82 - quant_clearer none history_no
2024-08-12 15:15:33.732 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:15:33.926 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:15:33.972 | INFO     | 8044:19976 | nxpy.service.service_player:info:75 - quant_clearer deal [8784]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:15:34.034 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:15:34.085 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:15:34.125 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:15:34.185 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:15:34.220 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:15:34.259 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:15:34.288 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:15:34.311 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:15:35.664 | INFO     | 8044:19976 | nxpy.service.service_player:info:75 - quant_clearer deal[8784] begin
2024-08-12 15:15:35.665 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:15:35.718 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:15:35.843 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:15:35.953 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:15:36.035 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:15:36.082 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:15:36.370 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:15:36.413 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:15:37.300 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:15:37.345 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:15:37.401 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:15:37.534 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:15:37.566 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:15:37.626 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:15:37.681 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:15:37.710 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:15:37.726 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:15:37.753 | INFO     | 8044:19976 | nxpy.service.service_player:info:75 - quant_clearer deal[8784] finished
2024-08-12 15:15:37.753 | INFO     | 8044:19976 | nxpy.service.service_player:info:75 - quant_clearer fit[8784] begin
2024-08-12 15:15:37.873 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:15:37.899 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:15:37.936 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:15:37.951 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:15:37.970 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:15:37.984 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:15:37.999 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:15:38.619 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:15:39.325 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:15:39.349 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:15:39.361 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:15:39.374 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:15:39.396 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:15:39.417 | DEBUG    | 8044:19976 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:16:00.478 | ERROR    | 8044:19976 | nxpy.service.service_player:error:82 - quant_clearer fit[8784] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:22:32.886 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:22:33.177 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:22:33.222 | INFO     | 31612:4464 | nxpy.service.service_player:info:75 - quant_clearer deal [8785]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:22:33.280 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:22:33.321 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:22:33.352 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:22:33.378 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:22:33.401 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:22:33.424 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:22:33.450 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:22:33.477 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:22:34.645 | INFO     | 31612:4464 | nxpy.service.service_player:info:75 - quant_clearer deal[8785] begin
2024-08-12 15:22:34.646 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:22:34.689 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:22:34.756 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:22:34.807 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:22:34.920 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:22:34.972 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:22:35.025 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:22:35.065 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:22:35.805 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:22:35.842 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:22:35.891 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:22:36.319 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:22:36.352 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:22:36.381 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:22:36.430 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:22:36.441 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:22:36.452 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:22:36.466 | INFO     | 31612:4464 | nxpy.service.service_player:info:75 - quant_clearer deal[8785] finished
2024-08-12 15:22:36.466 | INFO     | 31612:4464 | nxpy.service.service_player:info:75 - quant_clearer fit[8785] begin
2024-08-12 15:22:36.597 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:22:36.625 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:22:36.652 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:22:36.669 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:22:36.688 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:22:36.703 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:22:36.718 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:22:37.376 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:22:38.012 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:22:38.034 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:22:38.046 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:22:38.073 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:22:38.091 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:22:38.112 | DEBUG    | 31612:4464 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:23:06.376 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:23:06.447 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:23:06.490 | INFO     | 872:31296 | nxpy.service.service_player:info:75 - quant_clearer deal [8786]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:23:06.552 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:23:06.584 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:23:06.608 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:23:06.639 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:23:06.668 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:23:06.698 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:23:06.735 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:23:06.768 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:23:07.554 | INFO     | 872:31296 | nxpy.service.service_player:info:75 - quant_clearer deal[8786] begin
2024-08-12 15:23:07.554 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:23:07.590 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:23:07.626 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:23:07.664 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:23:07.755 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:23:07.801 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:23:07.848 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:23:07.898 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:23:08.551 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:23:08.589 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:23:08.632 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:23:09.057 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:23:09.109 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:23:09.149 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:23:09.195 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:23:09.205 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:23:09.217 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:23:09.232 | INFO     | 872:31296 | nxpy.service.service_player:info:75 - quant_clearer deal[8786] finished
2024-08-12 15:23:09.233 | INFO     | 872:31296 | nxpy.service.service_player:info:75 - quant_clearer fit[8786] begin
2024-08-12 15:23:09.350 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:23:09.373 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:23:09.406 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:23:09.420 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:23:09.444 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:23:09.459 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:23:09.475 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:23:10.186 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:23:10.861 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:23:10.900 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:23:10.938 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:23:10.966 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:23:11.032 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:23:11.083 | DEBUG    | 872:31296 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:23:32.190 | ERROR    | 872:31296 | nxpy.service.service_player:error:82 - quant_clearer fit[8786] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:43:04.272 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:43:04.712 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:43:04.817 | INFO     | 26964:18044 | nxpy.service.service_player:info:75 - quant_clearer deal [8787]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:43:04.878 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:43:04.925 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:43:04.970 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:43:05.005 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:43:05.070 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:43:05.128 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:43:05.189 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:43:05.257 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:43:07.308 | INFO     | 26964:18044 | nxpy.service.service_player:info:75 - quant_clearer deal[8787] begin
2024-08-12 15:43:07.308 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:43:07.357 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:43:07.413 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:43:07.477 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:43:07.564 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:43:07.616 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:43:07.687 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:43:07.754 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:43:08.534 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:43:08.587 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:43:08.639 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:43:09.119 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:43:09.274 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:43:09.325 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:43:09.397 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:43:09.426 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:43:09.480 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:43:09.517 | INFO     | 26964:18044 | nxpy.service.service_player:info:75 - quant_clearer deal[8787] finished
2024-08-12 15:43:09.518 | INFO     | 26964:18044 | nxpy.service.service_player:info:75 - quant_clearer fit[8787] begin
2024-08-12 15:43:09.640 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:43:09.693 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:43:09.739 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:43:09.793 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:43:09.844 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:43:09.896 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:43:09.946 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:43:10.807 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:43:11.492 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:43:11.533 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:43:11.555 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:43:11.581 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:43:11.631 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:43:11.664 | DEBUG    | 26964:18044 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:43:32.714 | ERROR    | 26964:18044 | nxpy.service.service_player:error:82 - quant_clearer fit[8787] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:44:19.771 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:44:20.411 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:44:20.496 | INFO     | 12484:17344 | nxpy.service.service_player:info:75 - quant_clearer deal [8788]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:44:20.557 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:44:20.618 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:44:20.660 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:44:20.697 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:44:20.750 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:44:20.795 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:44:20.868 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:44:20.908 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:44:22.466 | INFO     | 12484:17344 | nxpy.service.service_player:info:75 - quant_clearer deal[8788] begin
2024-08-12 15:44:22.467 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:44:22.522 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:44:22.590 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:44:22.670 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:44:22.777 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:44:22.905 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:44:23.013 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:44:23.102 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:44:23.853 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:44:24.006 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:44:24.129 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:44:24.509 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:44:24.586 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:44:24.665 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:44:24.780 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:44:24.825 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:44:24.869 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:44:24.899 | INFO     | 12484:17344 | nxpy.service.service_player:info:75 - quant_clearer deal[8788] finished
2024-08-12 15:44:24.900 | INFO     | 12484:17344 | nxpy.service.service_player:info:75 - quant_clearer fit[8788] begin
2024-08-12 15:44:25.022 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:44:25.080 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:44:25.120 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:44:25.174 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:44:25.214 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:44:25.262 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:44:25.281 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:44:25.998 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:44:26.711 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:44:26.774 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:44:26.918 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:44:26.994 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:44:27.033 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:44:27.125 | DEBUG    | 12484:17344 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:44:48.238 | ERROR    | 12484:17344 | nxpy.service.service_player:error:82 - quant_clearer fit[8788] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:48:12.173 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:48:12.641 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:48:12.936 | INFO     | 31040:30292 | nxpy.service.service_player:info:75 - quant_clearer deal [8789]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:48:12.999 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:48:13.097 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:48:13.201 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:48:13.245 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:48:13.280 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:48:13.347 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:48:13.381 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:48:13.447 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:48:15.137 | INFO     | 31040:30292 | nxpy.service.service_player:info:75 - quant_clearer deal[8789] begin
2024-08-12 15:48:15.138 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:48:15.256 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:48:15.324 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:48:15.398 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:48:15.570 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:48:15.647 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:48:15.867 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:48:15.988 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:48:16.956 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:48:17.037 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:48:17.113 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:48:18.418 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:48:18.573 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:48:18.646 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:48:18.877 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:48:18.984 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:48:19.036 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:48:19.106 | INFO     | 31040:30292 | nxpy.service.service_player:info:75 - quant_clearer deal[8789] finished
2024-08-12 15:48:19.106 | INFO     | 31040:30292 | nxpy.service.service_player:info:75 - quant_clearer fit[8789] begin
2024-08-12 15:48:19.226 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:48:19.262 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:48:19.331 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:48:19.363 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:48:19.404 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:48:19.462 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:48:19.489 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:48:20.363 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:48:21.256 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:48:21.302 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:48:21.317 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:48:21.369 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:48:21.449 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:48:21.498 | DEBUG    | 31040:30292 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:48:42.570 | ERROR    | 31040:30292 | nxpy.service.service_player:error:82 - quant_clearer fit[8789] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:49:28.240 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:49:29.380 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:49:29.440 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal [8790]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:49:29.503 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:49:29.540 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:49:29.584 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:49:29.615 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:49:29.687 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:49:29.779 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:49:29.997 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:49:30.045 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:49:32.379 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal[8790] begin
2024-08-12 15:49:32.379 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:49:32.435 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:49:32.513 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:49:32.629 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:49:33.100 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:49:33.219 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:49:33.299 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:49:33.358 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:49:34.394 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:49:34.510 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:49:34.611 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:49:35.404 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:49:35.478 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:49:35.547 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:49:35.660 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:49:35.735 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:49:35.789 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:49:35.878 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal[8790] finished
2024-08-12 15:49:35.879 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer fit[8790] begin
2024-08-12 15:49:36.001 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:49:36.160 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:49:36.275 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:49:36.325 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:49:36.371 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:49:36.404 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:49:36.448 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:49:37.297 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:49:38.051 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:49:38.116 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:49:38.188 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:49:38.291 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:49:38.320 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:49:38.379 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:49:59.453 | ERROR    | 25224:15172 | nxpy.service.service_player:error:82 - quant_clearer fit[8790] failed: error[local variable 'move_command' referenced before assignment]
2024-08-12 15:50:23.563 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.0] = [SELECT CurrValue FROM quant.t_Counter WHERE CounterID = 't_QuantTestHistory' FOR UPDATE]
2024-08-12 15:50:23.692 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_history_no.1] = [UPDATE quant.t_Counter SET CurrValue = %s WHERE CounterID = 't_QuantTestHistory']
2024-08-12 15:50:23.891 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal [8791]->[./media/yimt/e/temp/futurequant/out\00030675\20211120225021]
2024-08-12 15:50:23.980 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.0] = [DELETE FROM quant.t_Future_SimTestInfo WHERE HistoryNo = %s]
2024-08-12 15:50:24.147 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.1] = [DELETE FROM quant.t_Future_SimTestInitPosition WHERE HistoryNo = %s]
2024-08-12 15:50:24.268 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.2] = [DELETE FROM quant.t_Future_SimTestOrder WHERE HistoryNo = %s]
2024-08-12 15:50:24.322 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.3] = [DELETE FROM quant.t_Future_SimTestTrade WHERE HistoryNo = %s]
2024-08-12 15:50:24.371 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.4] = [DELETE FROM quant.t_Future_SimTestPosition WHERE HistoryNo = %s]
2024-08-12 15:50:24.419 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.5] = [DELETE FROM quant.t_Future_SimTestPositionDetail WHERE HistoryNo = %s]
2024-08-12 15:50:24.467 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.6] = [DELETE FROM quant.t_Future_SimTestSubMD WHERE HistoryNo = %s]
2024-08-12 15:50:24.520 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.clean_future_simtest_data.7] = [DELETE FROM quant.t_Future_SimTestTradingAccount WHERE HistoryNo = %s]
2024-08-12 15:50:25.857 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal[8791] begin
2024-08-12 15:50:25.857 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.0] = [DELETE FROM quant.t_Future_QuantOrder WHERE HistoryNo = %s]
2024-08-12 15:50:25.953 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.1] = [INSERT INTO quant.t_Future_QuantOrder(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,Direction,OffsetFlag,HedgeFlag,OrderPriceType,TimeCondition,VolumeCondition,ContingentCondition,SimOrderType,LimitPrice,Volume,VolumeMultiple,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,Turnover)
                        SELECT %s AS HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.OrderPriceType, t.TimeCondition, t.VolumeCondition, t.ContingentCondition, NULL AS SimOrderType, t.LimitPrice, t.VolumeTotalOriginal AS Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.OrderStatus, t.VolumeTraded, t.InsertTime,0 AS InsertMillisec, t.CancelTime, t.TradeAmount AS Turnover
                        FROM quant.t_Future_SimTestOrder t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:50:26.163 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.2] = [DELETE FROM quant.t_Future_QuantTrade WHERE HistoryNo = %s]
2024-08-12 15:50:26.243 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.3] = [INSERT INTO quant.t_Future_QuantTrade(HistoryNo, TradingDay, TradeID, TradeDate, TradeTime, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, Direction, OffsetFlag, HedgeFlag, Price, Volume, VolumeMultiple, OrderLocalID, OrderSysID, TradingAmount, TotalPosCost, TradingFee, BeforeTradeTodayAmount, AfterTradeTodayAmount)
                        SELECT t.HistoryNo, t.TradingDay, t.TradeID, t.TradeDate, t.TradeTime, t.ExchangeID, t.InstrumentID, IFNULL(t1.InstrumentName, '') AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.Direction, t.OffsetFlag, t.HedgeFlag, t.Price, t.Volume, t.VolumeMultiple, t.OrderLocalID, t.OrderSysID, t.Price * t.Volume * t.VolumeMultiple AS TradingAmount, t.Price * t.Volume * t.VolumeMultiple + t.Commission AS TotalPosCost, t.Commission AS TradingFee, 0 AS BeforeTradeTodayAmount, 0 AS AfterTradeTodayAmount
                        FROM quant.t_Future_SimTestTrade t
                        LEFT JOIN quant.t_future_quantmarketdata t1 ON (t.TradingDay = t1.TradingDay And t.ExchangeID = t1.ExchangeID AND t.InstrumentID = t1.InstrumentID)
                        WHERE t.HistoryNo = %s]
2024-08-12 15:50:26.329 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.4] = [DELETE FROM quant.t_Future_QuantAsset WHERE HistoryNo = %s]
2024-08-12 15:50:26.417 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.5] = [INSERT INTO quant.t_Future_QuantAsset(HistoryNo, TradingDay, InitAmount, InitMargin, InitAsset, PreAmount, PreMargin, PreAsset, Amount, Margin, TodayBuyCapital, TodaySellCapital, TodayProfit, Profit, TotalAsset, ProfitRatio, MaxTodayLongAmount, MaxTodayShortAmount)
                        SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(IFNULL(tt.TodayBuyCapital, 0)) AS TodayBuyCapital, SUM(IFNULL(tt.TodaySellCapital, 0)) AS TodaySellCapital, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, IF(SUM(t.InitAsset) = 0, 0, SUM(t.Profit) / SUM(t.InitAsset)) AS ProfitRatio, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                        FROM(
                            SELECT t.HistoryNo, t.TradingDay, SUM(t.InitAmount) AS InitAmount, SUM(t.InitMargin) AS InitMargin, SUM(t.InitAsset) AS InitAsset, SUM(t.PreAmount) AS PreAmount, SUM(t.PreMargin) AS PreMargin, SUM(t.PreAsset) AS PreAsset, SUM(t.Amount) AS Amount, SUM(t.Margin) AS Margin, SUM(t.TodayProfit) AS TodayProfit, SUM(t.Profit) AS Profit, SUM(t.TotalAsset) AS TotalAsset, SUM(t.MaxTodayLongAmount) AS MaxTodayLongAmount, SUM(t.MaxTodayShortAmount) AS MaxTodayShortAmount
                            FROM (SELECT t.HistoryNo, t.TradingDay, t4.InitAmount, t4.InitMargin, t4.InitAmount AS InitAsset, t.PreBalance AS PreAmount, 0 AS PreMargin, t.PreBalance AS PreAsset, t.Balance AS Amount, t.CurrMargin AS Margin, t.Balance - t.PreBalance AS TodayProfit, t.Balance - t4.InitAmount AS Profit, t.Balance AS TotalAsset, 0 AS MaxTodayLongAmount, 0 AS MaxTodayShortAmount
                                FROM quant.t_Future_SimTestTradingAccount t
                                JOIN (SELECT DISTINCT TradingDay FROM quant.t_future_quantmarketdata WHERE ExchangeID = 'SHFE') t3 ON (t.TradingDay = t3.TradingDay)
                                JOIN (SELECT t.TradingDay, t.PreBalance AS InitAmount, t.PreMargin AS InitMargin FROM quant.t_Future_SimTestTradingAccount t WHERE t.HistoryNo = %s ORDER BY t.TradingDay Limit 1) t4
                                WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNo, t.TradingDay) t
                        LEFT JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' AND t.OffsetFlag = '1'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodayBuyCapital, SUM(IFNULL(IF((t.Direction = '0' AND t.OffsetFlag = '1') OR (t.Direction = '1' AND t.OffsetFlag = '0'), t.Price * t.Volume * t.VolumeMultiple, 0), 0)) AS TodaySellCapital FROM quant.t_Future_QuantTrade t WHERE t.HistoryNo = %s GROUP BY t.HistoryNo, t.TradingDay) tt ON (t.HistoryNo = tt.HistoryNo AND t.TradingDay = tt.TradingDay)
                        GROUP BY t.HistoryNo, t.TradingDay]
2024-08-12 15:50:26.502 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.6] = [DELETE FROM quant.t_Future_QuantPosition WHERE HistoryNo = %s]
2024-08-12 15:50:26.578 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.7] = [INSERT INTO quant.t_Future_QuantPosition(HistoryNo,TradingDay,ExchangeID,InstrumentID,InstrumentName,FullInstrumentID,SpecInstrumentID,PosiDirection,HedgeFlag,PositionDate,Position,YdPosition,OpenVolume,CloseVolume,VolumeMultiple,OpenAmount,CloseAmount,PositionCost,PreMargin,UseMargin,ExchangeMargin,Commission,CloseProfit,PositionProfit,SettlementPrice,LastSettlementPrice,OpenCost,CloseProfitByDate,CloseProfitByTrade,TodayPosition,MarginRateByMoney,MarginRateByVolume,Profit,TodayProfit,TodayBuyCapital,TodaySellCapital,BuyCapital,SellCapital,ReturnRatio,ContributionRatio)
                        SELECT t.HistoryNo, t.TradingDay, t.ExchangeID, t.InstrumentID, t3.InstrumentName AS InstrumentName, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS FullInstrumentID, CONCAT(t.InstrumentID, '.', t.ExchangeID) AS SpecInstrumentID, t.PosiDirection, t.HedgeFlag, t.PositionDate, t.Position, t.YdPosition, t.OpenVolume, t.CloseVolume, t.VolumeMultiple, t.OpenAmount, t.CloseAmount, t.PositionCost,
                            t.PreMargin, t.UseMargin, t.ExchangeMargin, t.Commission, t.CloseProfit, t.PositionProfit, t.SettlementPrice, t3.LastSettlementPrice, t.OpenCost, t.CloseProfitByDate, t.CloseProfitByTrade, t.TodayPosition, t.MarginRateByMoney, t.MarginRateByVolume, t.CloseProfit + t.PositionProfit AS Profit, t.CloseProfit + t.PositionProfit - IFNULL(t4.CloseProfit, 0) - IFNULL(t4.PositionProfit, 0) AS TodayProfit, IFNULL(t5.TodayBuyCapital, 0) AS TodayBuyCapital, IFNULL(t5.TodaySellCapital, 0) AS TodaySellCapital, IFNULL(t5.BuyCapital, 0) AS BuyCapital, IFNULL(t5.SellCapital, 0) AS SellCapital, IF(IFNULL(t5.BuyCapital, 0) = 0 , 0, (t.CloseProfit + t.PositionProfit) / t5.BuyCapital) AS ReturnRatio, IF(t6.AbsProfit = 0, 0, (t.CloseProfit + t.PositionProfit) / t6.AbsProfit) AS ContributionRatio
                            FROM quant.t_future_simtestposition t
                            JOIN quant.t_future_simtestinfo t2 ON (t.HistoryNo = t2.HistoryNo)
                            JOIN quant.t_future_quantmarketdata t3 ON (t.TradingDay = t3.TradingDay AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID)
                            LEFT JOIN quant.t_future_simtestposition t4 ON (t.HistoryNo = t4.HistoryNo AND t3.LastTradingDay = t4.Tradingday AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t4.InstrumentID AND t.PosiDirection = t4.PosiDirection AND t.HedgeFlag = t4.HedgeFlag)
                            LEFT JOIN (SELECT t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodayBuyCapital, SUM(IF(t1.Direction = '0', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS BuyCapital, SUM(IF(t1.TradingDay = t1.TradeDay, 1, 0) * IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS TodaySellCapital, SUM(IF(t1.Direction = '1', 1, 0) * t1.Volume * t1.Price * t1.VolumeMultiple) AS SellCapital
                                        FROM (SELECT t2.HistoryNo, t1.TradingDay, t2.TradeID, t2.TradingDay AS TradeDay, t2.TradeDate, t2.TradeTime, t2.ExchangeID, t2.InstrumentID, t2.Direction, t2.HedgeFlag, t2.Volume, t2.VolumeMultiple, t2.Price, t2.Commission, t2.OrderLocalID, t2.OrderSysID
                                                FROM (SELECT tm.TradingDay FROM quant.t_future_simtestinfo ti, quant.t_future_quantmarketdata tm WHERE ti.HistoryNo = %s AND tm.ExchangeID = 'SHFE' AND tm.Tradingday >= ti.SetMDBeginDate AND tm.TradingDay <= ti.SetMDEndDate) t1, quant.t_future_simtesttrade t2
                                                WHERE t2.HistoryNo = %s AND t1.TradingDay >= t2.TradingDay) t1, quant.t_future_quantmarketdata t2
                                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID
                                        GROUP BY t1.HistoryNo, t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.HedgeFlag) t5 ON (t.HistoryNo = t5.HistoryNo AND t.TradingDay = t5.TradingDay AND t.ExchangeID = t5.ExchangeID AND t.InstrumentID = t5.InstrumentID AND t.HedgeFlag = t5.HedgeFlag)
                            JOIN (SELECT t.HistoryNo, t.TradingDay, SUM(ABS(t.Profit)) AS AbsProfit FROM (SELECT t.HistoryNo, t.TradingDay, t.CloseProfit + t.PositionProfit AS Profit FROM quant.t_future_simtestposition t WHERE t.HistoryNo = %s) t GROUP BY t.HistoryNO, t.TradingDay) t6 ON (t.HistoryNo = t6.HistoryNo AND t.TradingDay = t6.TradingDay)
                            WHERE t.HistoryNo = %s]
2024-08-12 15:50:27.550 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.8] = [DELETE FROM quant.t_Future_QuantProfit WHERE HistoryNo = %s]
2024-08-12 15:50:27.698 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.9] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, TradingCount, TradingFee, Profit, BuyCapital, SellCapital, ReturnRatio, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, tradingCount, tradingFee, t.Profit, t.BuyCapital, t.SellCapital, IF(t.ReturnBase = 0, 0, t.Profit / t.ReturnBase) AS ReturnRatio, 0 AS ContributionRatio
                        FROM(
                            SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t3.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag, IFNULL(t2.TradingCount, 0) AS TradingCount, IFNULL(t2.TradingAmount, 0) AS TradingAmount, IFNULL(t2.BuyCapital, 0) AS BuyCapital, IFNULL(t2.SellCapital, 0) AS SellCapital, IFNULL(t2.TradingProfit, 0) AS TradingProfit, IFNULL(t2.TradingFee, 0) AS TradingFee, IFNULL(t2.TradingProfit, 0) - IFNULL(t2.TradingFee, 0) AS Profit, CASE WHEN t.PosiDirection = '2' THEN IFNULL(t2.BuyCapital, 0) WHEN t.PosiDirection = '3' THEN -1 * IFNULL(t2.SellCapital, 0) ELSE 0 END AS ReturnBase
                            FROM
                                (SELECT DISTINCT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s) t
                                LEFT JOIN (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag, SUM(tradingCount) AS TradingCount, SUM(tradingAmount) AS TradingAmount, SUM(t.BuyCapital) AS BuyCapital, SUM(t.SellCapital) AS SellCapital, SUM(tradingProfit) AS TradingProfit, SUM(tradingFee) AS TradingFee
                                FROM
                                (SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, CASE WHEN (t.Direction = '0' AND t.OffsetFlag = '0') OR (t.Direction = '1' and t.OffsetFlag != '0') THEN '2' WHEN (t.Direction = '1' AND t.OffsetFlag = '0') OR (t.Direction = '0' and t.OffsetFlag != '0')  THEN '3' ELSE 0 END AS PosiDirection, t.HedgeFlag, 1 AS TradingCount, tradingAmount, CASE WHEN t.Direction = '0' THEN 1 WHEN t.Direction = '1' THEN 0 ELSE 0 END * t.TradingAmount AS BuyCapital, CASE WHEN t.Direction = '0' THEN 0 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS SellCapital, CASE WHEN t.Direction = '0' THEN -1 WHEN t.Direction = '1' THEN 1 ELSE 0 END * t.TradingAmount AS TradingProfit, tradingFee
                                FROM quant.t_Future_Quanttrade t
                                WHERE t.HistoryNo = %s) t
                                GROUP BY t.HistoryNo, t.ExchangeID, t.InstrumentID, t.PosiDirection, t.HedgeFlag) t2 ON (t.HistoryNo = t2.HistoryNo AND t.ExchangeID = t2.ExchangeID AND t.InstrumentID = t2.InstrumentID AND t.PosiDirection = t2.PosiDirection AND t.HedgeFlag = t2.HedgeFlag)
                                LEFT JOIN(SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.PosiDirection, t.HedgeFlag
                                FROM quant.t_Future_QuantPosition t
                                WHERE t.HistoryNo = %s AND tradingDay = (SELECT MAX(tp.TradingDay) FROM quant.t_Future_QuantPosition tp WHERE tp.HistoryNo = %s)) t3 ON (t.HistoryNo = t3.HistoryNo AND t.ExchangeID = t3.ExchangeID AND t.InstrumentID = t3.InstrumentID AND t.PosiDirection = t3.PosiDirection AND t.HedgeFlag = t3.HedgeFlag)) t]
2024-08-12 15:50:27.803 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.deal_future_quant_data.10] = [INSERT INTO quant.t_Future_QuantProfit(HistoryNo, ExchangeID, InstrumentID, InstrumentName, FullInstrumentID, SpecInstrumentID, PosiDirection, HedgeFlag, ContributionRatio)
                        SELECT t.HistoryNo, t.ExchangeID, t.InstrumentID, t.InstrumentName, t.FullInstrumentID, t.SpecInstrumentID, t.PosiDirection, HedgeFlag, CASE WHEN t.Profit > 0 AND t1.TotalGain > 0 THEN t.Profit / t1.TotalGain WHEN t.Profit < 0 AND t1.TotalLose < 0 THEN t.Profit / t1.TotalLose ELSE 0 END AS ContributionRatio
                        FROM quant.t_Future_QuantProfit t,
                            (SELECT t.HistoryNo, SUM(IF(t.Profit > 0, t.Profit, 0)) AS TotalGain, SUM(IF(t.Profit < 0, t.Profit, 0)) AS TotalLose
                            FROM quant.t_Future_QuantProfit t
                            WHERE t.HistoryNo = %s
                            GROUP BY t.HistoryNo) t1
                        WHERE t.HistoryNo = %s AND t.HistoryNo = t1.HistoryNo
                        ON DUPLICATE KEY UPDATE ContributionRatio = VALUES(ContributionRatio)]
2024-08-12 15:50:28.496 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_profit] = [SELECT HistoryNo, TradingDay, '15:00:00' AS TradingTime, PreAsset AS LastAsset, TotalAsset AS Asset, TodayProfit AS DayProfit, TodayBuyCapital AS DayBuyCapital, TodaySellCapital AS DaySellCapital, Profit AS TotalProfit, ProfitRatio AS TotalProfitRatio
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s]
2024-08-12 15:50:28.568 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_bench_profit] = [SELECT t1.HistoryNo, CONCAT(CASE WHEN t2.ExchangeID = '1' THEN 'sh' WHEN t2.ExchangeID = '2' THEN 'sz' WHEN t2.ExchangeID = '4' THEN 'bj' ELSE '' END, t2.SecurityID) AS BenchmarkStockID, t2.SecurityName AS BenchmarkStockName, t2.TradingDay, t2.TradingTime, IF(t2.LastClosingPrice = 0, t2.ClosingPrice, t2.LastClosingPrice) AS LastClosingPrice, t2.ClosingPrice, ROUND(t2.ClosingPrice - t3.LastClosingPrice, 4) AS TotalProfit, ROUND((t2.ClosingPrice - t3.LastClosingPrice) / t3.LastClosingPrice, 6) AS TotalProfitRatio
                    FROM quant.t_future_quantasset t1, quant.t_quantmarketdata t2, 
                        (SELECT t.ExchangeID, t.SecurityID, IF(t.LastClosingPrice = 0, t.ClosingPrice, t.LastClosingPrice) AS LastClosingPrice
                            FROM quant.t_quantmarketdata t, (SELECT t.ExchangeID, t.SecurityID, MIN(TradingDay) AS MinTradingDay FROM quant.t_quantmarketdata t WHERE t.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ') GROUP BY t.ExchangeID, t.SecurityID) t1, (SELECT MIN(TradingDay) AS MinQuantTradingDay FROM quant.t_future_quantasset WHERE HistoryNo = %s) t2
                            WHERE t.ExchangeID = t1.ExchangeID AND t.SecurityID = t1.SecurityID AND ((t.TradingDay = t1.MinTradingDay AND t1.MinTradingDay > t2.MinQuantTradingDay) OR (t.TradingDay = t2.MinQuantTradingDay AND t1.MinTradingDay <= t2.MinQuantTradingDay))) t3
                    WHERE t1.HistoryNo = %s AND t1.TradingDay = t2.TradingDay AND t2.ExchangeID = t3.ExchangeID AND t2.SecurityID = t3.SecurityID AND t2.FullSecurityID IN ('000001.SH', '000016.SH', '000300.SH', '000905.SH', '399006.SZ')]
2024-08-12 15:50:28.620 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_info] = [SELECT HistoryNo, BrokerID, UserID, InvestorID, QuantID, TestID, TestName, MDFrequency, InitalAmount, TestBeginTime, TestEndTime, ActualMDBeginDate, ActualMDEndDate, SetMDBeginDate, SetMDEndDate, ManualID
                    FROM quant.t_future_simtestinfo
                    WHERE HistoryNo = %s]
2024-08-12 15:50:28.699 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_test_market] = [SELECT DISTINCT SecurityCategoryType FROM quant.t_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:50:28.754 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_test_history] = [SELECT t.InitAsset, t.TotalAsset, (SELECT COUNT(1) FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) AS TestTradeDays FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s ORDER BY t.TradingDay DESC LIMIT 1]
2024-08-12 15:50:28.783 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.save_future_quant_history.0] = [INSERT INTO quant.t_quanttesthistory(HistoryNo, TestID, TestInvestorID, TestUserID, StrategyName, TestDate, TestTime, TestTradeDateBegin, TestTradeDateEnd, TestTradeDays, TestKind, InitAsset, Asset, TestDataStatus, TestDataFileStatus, TestRunTime)
                            SELECT t.HistoryNo, t.QuantID AS TestID, t.UserID AS TestInvestorID, t2.UserID AS TestUserID, t.TestID AS StrategyName, substr(t.TestBeginTime, 1, 8) AS TestDate, CONCAT(substr(t.TestBeginTime, 9, 2), ':', substr(t.TestBeginTime, 11, 2), ':', substr(t.TestBeginTime, 13, 2)) AS TestTime, t.SetMDBeginDate AS TestTradeDateBegin, t.SetMDEndDate AS TestTradeDateEnd, %s AS TestTradeDays, '1' AS TestKind, %s AS InitAsset, %s AS Asset, %s AS TestDataStatus, %s AS TestDataFileStatus, 1000 * TIMESTAMPDIFF(SECOND, t.TestBeginTime, t.TestEndTime) AS TestRunTime
                            FROM quant.t_future_simtestinfo t, siminfo.t_investor t1, simtrade.t_user t2
                            WHERE t.HistoryNo = %s AND t.UserID = t1.InvestorID AND t1.OpenId = t2.Mobile LIMIT 1
                            ON DUPLICATE KEY UPDATE TestDataFileStatus = VALUES(TestDataFileStatus)]
2024-08-12 15:50:28.825 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer deal[8791] finished
2024-08-12 15:50:28.826 | INFO     | 25224:15172 | nxpy.service.service_player:info:75 - quant_clearer fit[8791] begin
2024-08-12 15:50:28.955 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_orders] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,SimOrderType,OrderPriceType,VolumeCondition,TimeCondition,ROUND(LimitPrice, 4) AS LimitPrice,Volume,OrderLocalID,OrderSysID,OrderStatus,VolumeTraded,InsertTime,InsertMillisec,CancelTime,ROUND(Turnover, 6) AS Turnover
                    FROM quant.t_future_quantorder
                    WHERE HistoryNo = %s
                    ORDER BY TradingDay, OrderLocalID, OrderSysID]
2024-08-12 15:50:29.039 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_trades] = [SELECT TradingDay,TradeID,OrderLocalID,OrderSysID,TradeDate,TradeTime,FullInstrumentID AS InstrumentID,InstrumentName,Direction,OffsetFlag,HedgeFlag,Volume,ROUND(Price, 4) AS Price, ROUND(TradingAmount, 2) AS TradingAmount, ROUND(TotalPosCost, 2) AS TotalPosCost, ROUND(TradingFee, 2) AS TradingFee, ROUND(BeforeTradeTodayAmount, 4) AS BeforeTradeTodayAmount, ROUND(AfterTradeTodayAmount, 4) AS AfterTradeTodayAmount
                    FROM quant.t_future_quanttrade
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay, TradeID, OrderLocalID, OrderSysID]
2024-08-12 15:50:29.136 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_assets] = [SELECT TradingDay,PreAmount,PreMargin,PreAsset,Amount,Margin,TotalAsset, MaxTodayLongAmount, MaxTodayShortAmount
                    FROM quant.t_future_quantasset
                    WHERE HistoryNo = %s 
                    ORDER BY TradingDay]
2024-08-12 15:50:29.207 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 4) AS ReturnRatio,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(LastSettlementPrice, 2) AS LastSettlementPrice,ROUND(OpenCost, 2) AS TotalOpenPosCost
                    FROM quant.t_future_quantposition
                    WHERE historyno = %s
                    UNION
                    SELECT t1.TradingDay,'000000' AS InstrumentID,'000000' AS InstrumentName,'' AS PosiDirection,'' AS HedgeFlag,0 AS Position,ROUND(t2.TotalAsset, 2) AS SettlementPrice,ROUND(t2.Amount, 2) AS TotalPosCost,0 AS OpenPosCost,ROUND(t2.Margin, 2) AS Margin,0 AS TradingFee,ROUND(t2.Profit, 2) AS Profit,0 AS YdPosition,ROUND(t2.TodayProfit, 2) AS TodayProfit,0 AS TodayBuyCapital,0 AS TodaySellCapital,0 AS BuyCapital,0 AS SellCapital,0 AS ReturnRatio,0 AS ContributionRatio,0 AS LastSettlementPrice,0 AS TotalOpenPosCost
                        FROM quant.t_future_quantposition t1, quant.t_future_quantasset t2
                        WHERE t1.HistoryNo = %s AND t1.HistoryNo = t2.HistoryNo AND t1.TradingDay = t2.TradingDay
                ORDER BY TradingDay, InstrumentID DESC]
2024-08-12 15:50:29.247 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_profits] = [SELECT FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,TradingCount,ROUND(TradingFee, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ContributionRatio, 4) AS ContributionRatio,ROUND(ReturnRatio, 4) AS ReturnRatio
                    FROM quant.t_future_quantprofit
                    WHERE HistoryNo = %s ORDER BY InstrumentID]
2024-08-12 15:50:29.333 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_month_summary] = [SELECT t.TradeMonth, ROUND(t1.PreAsset, 2) AS LastAsset, ROUND(t2.TotalAsset, 2) AS Asset, ROUND(t.BuyTradingAmount, 2) AS BuyTradingAmount, ROUND(t.SellTradingAmount, 2) AS SellTradingAmount, t3.Volume
                    FROM (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, MIN(TradingDay) AS FirstTradingDay, MAX(TradingDay) AS LastTradingDay, SUM(TodayBuyCapital) AS BuyTradingAmount, SUM(TodaySellCapital) AS SellTradingAmount
                            FROM quant.t_future_quantasset
                            WHERE HistoryNo = %s
                            GROUP BY HistoryNo, SUBSTR(TradingDay, 1, 6))t, quant.t_future_quantasset t1, quant.t_future_quantasset t2,
                        (SELECT HistoryNo, SUBSTR(TradingDay, 1, 6) AS TradeMonth, COUNT(1) AS Volume FROM quant.t_future_quanttrade WHERE historyno = %s) t3
                    WHERE t.HistoryNo = t1.HistoryNo AND t.HistoryNo = t2.HistoryNo AND t.FirstTradingDay = t1.TradingDay AND t.LastTradingDay = t2.TradingDay
                        AND t.HistoryNo = t3.HistoryNo AND t.TradeMonth = t3.TradeMonth
                    ORDER BY t.TradeMonth]
2024-08-12 15:50:29.382 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_benches] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t5.OpeningPrice) / t5.OpeningPrice, (t4.OpeningPrice - t5.OpeningPrice) / t5.OpeningPrice), 6) AS ProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t2.FirstTradingDay, t2.LastTradingDay, t1.OpeningPrice, t1.ClosingPrice FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    JOIN quant.t_future_quantmarketdata t5 ON (t1.FirstTradingDay = t5.TradingDay AND t1.ExchangeID = t5.ExchangeID AND t1.InstrumentID = t5.InstrumentID)
                    ORDER BY t1.TradingDay, t1.InstrumentID]
2024-08-12 15:50:30.223 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_submds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, t1.InstrumentName , ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, ROUND(IF(t1.TradingDay = t1.LastTradingDay, (t1.ClosingPrice - t1.OpeningPrice) / t1.OpeningPrice, (t4.OpeningPrice - t1.OpeningPrice) / t1.OpeningPrice), 6) AS DayProfitRatio
                    FROM (SELECT t1.TradingDay, t1.ExchangeID, t1.InstrumentID, t1.FullInstrumentID, t1.InstrumentName, t2.FirstTradingDay, t2.LastTradingDay, t1.LastClosingPrice, t1.ClosingPrice, t1.OpeningPrice, t1.TopPrice, t1.FloorPrice, t1.TradingVolume, t1.TradingAmount FROM quant.t_future_quantmarketdata t1, (SELECT t2.TradingDay, t2.ExchangeID, t2.InstrumentID, t3.FirstTradingDay, t4.LastTradingDay FROM quant.t_future_simtestsubmd t2, (SELECT MIN(t.TradingDay) AS FirstTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t3, (SELECT MAX(t.TradingDay) AS LastTradingDay FROM quant.t_future_quantasset t WHERE t.HistoryNo = %s) t4 WHERE t2.HistoryNo = %s) t2
                        WHERE t1.TradingDay = t2.TradingDay AND t1.ExchangeID = t2.ExchangeID AND t1.InstrumentID = t2.InstrumentID) t1
                    JOIN quant.t_future_quantmarketdata t4 ON (t1.TradingDay = t4.LastTradingDay AND t1.ExchangeID = t4.ExchangeID AND t1.InstrumentID = t4.InstrumentID)
                    ORDER BY t1.TradingDay, t1.FullInstrumentID]
2024-08-12 15:50:31.001 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_future_quant_db_positions] = [SELECT TradingDay,FullInstrumentID AS InstrumentID,InstrumentName,PosiDirection,HedgeFlag,Position,ROUND(SettlementPrice, 4) AS SettlementPrice,ROUND(PositionCost, 2) AS TotalPosCost,ROUND(OpenCost, 2) AS OpenPosCost,ROUND(UseMargin, 2) AS Margin,ROUND(Commission, 2) AS TradingFee,ROUND(Profit, 2) AS Profit,YdPosition,ROUND(TodayProfit, 2) AS TodayProfit,ROUND(TodayBuyCapital, 2) AS TodayBuyCapital,ROUND(TodaySellCapital, 2) AS TodaySellCapital,ROUND(BuyCapital, 2) AS BuyCapital,ROUND(SellCapital, 2) AS SellCapital,ROUND(ReturnRatio, 6) AS ReturnRatio,ROUND(ContributionRatio, 6) AS ContributionRatio,ROUND(LastSettlementPrice, 4) AS LastSettlementPrice
                    FROM quant.t_future_quantposition
                    WHERE HistoryNo = %s]
2024-08-12 15:50:31.087 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_sub_instruments] = [SELECT DISTINCT ExchangeID, InstrumentID FROM quant.t_future_simtestsubmd WHERE HistoryNo = %s]
2024-08-12 15:50:31.159 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:50:31.213 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:50:31.264 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:50:31.298 | DEBUG    | 25224:15172 | nxpy.db.executor:make_statement:465 - sql [quant_data_clear.get_quant_future_dkmds] = [SELECT t1.TradingDay, t1.FullInstrumentID AS InstrumentID, ROUND(t1.LastClosingPrice, 4) AS LastClosingPrice, ROUND(t1.OpeningPrice, 4) AS OpeningPrice, ROUND(t1.ClosingPrice, 4) AS ClosingPrice, ROUND(t1.TopPrice, 4) AS TopPrice, ROUND(t1.FloorPrice, 4) AS FloorPrice, t1.TradingVolume, ROUND(t1.TradingAmount, 2) AS TradingAmount, t3.LongOpenPosCost, t3.ShortOpenPosCost, t3.LongYdPosition, t3.ShortYdPosition
                    FROM quant.t_future_quantmarketdata t1
                    JOIN quant.t_future_quantasset t2 ON (t2.HistoryNo = %s AND t1.TradingDay = t2.TradingDay)
                    LEFT JOIN (SELECT t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID, SUM(ROUND(IF(t3.PosiDirection = '2', t3.OpenCost, 0), 2)) AS LongOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '3', t3.OpenCost, 0), 2)) AS ShortOpenPosCost, SUM(ROUND(IF(t3.PosiDirection = '2', t3.YdPosition, 0), 2)) AS LongYdPosition, SUM(ROUND(IF(t3.PosiDirection = '3', t3.YdPosition, 0), 2)) AS ShortYdPosition FROM quant.t_future_quantposition t3 WHERE t3.HistoryNo = %s GROUP BY t3.HistoryNo, t3.TradingDay, t3.ExchangeID, t3.InstrumentID, t3.FullInstrumentID) t3 ON (t3.HistoryNo = %s AND t1.TradingDay = t3.TradingDay AND t1.ExchangeID = t3.ExchangeID AND t1.InstrumentID = t3.InstrumentID)
                    WHERE t1.ExchangeID = %s AND t1.InstrumentID = %s
                    ORDER BY t1.TradingDay]
2024-08-12 15:50:52.373 | ERROR    | 25224:15172 | nxpy.service.service_player:error:82 - quant_clearer fit[8791] failed: error[local variable 'move_command' referenced before assignment]
