class BannerWebpackPlugin {
  constructor(options = {}) {
    this.options = options
  }
  apply(compiler) {
    // 在资源输出之前触发
    compiler.hooks.emit.tapAsync('BannerWebpackPlugin', (compilation, callback) => {
      const extensions = ['js', 'css']
      // 1. 获取即将输出的资源文件 如 compilation.assets
      // 2. 过滤只保留 js 和 css 文件
      const assets = Object.keys(compilation.assets).filter((assetPath) => {
        const splitted = assetPath.split('.')
        const extension = splitted[splitted.length - 1]
        return extensions.includes(extension)
      })

      const prefix = `/**
* This file is auto-generated by ${this.options.author}
*/
`
      // 3. 遍历剩下资源添加上注释
      assets.forEach((asset) => {
        // 获取原来内容
        const source = compilation.assets[asset].source()
        const content = prefix + source
        compilation.assets[asset] = {
          // 添加注释
          source: function () {
            return content
          },
          size: function () {
            return content.length
          }
        }
      })

      callback()
    })
  }
}

module.exports = BannerWebpackPlugin
